n <- 1000
r <- 6 * pi + 1
r_offset <- 2
colors <- c("blue", "red")
generate_spiral <- function(n, r, r_offset, colors, seed) {
set.seed(seed)
# Generate random values for r and theta
r <- runif(n, 1, 6 * pi + 1)
theta <- runif(n, 0, 2 * pi)
# Classify observations based on r and theta
class <- ifelse((r + theta) %% (2 * pi) < pi, 1, 0)
# Create a data frame with the data
data <- data.frame(r, theta, class)
# Create colors based on class
data$color <- ifelse(data$class == 1, colors[2], colors[1])
# Convert polar coordinates to Cartesian coordinates
data$x <- data$r * cos(data$theta)
data$y <- data$r * sin(data$theta)
# Offset the data
for (j in 1:n) {
r_offset_val <- runif(1, 0, r_offset)
theta_offset_val <- runif(1, 0, 2 * pi)
# Convert to Cartesian coordinates
data$x[j] <- data$x[j] + r_offset_val * cos(theta_offset_val)
data$y[j] <- data$y[j] + r_offset_val * sin(theta_offset_val)
# Convert back to polar coordinates
data$r[j] <- sqrt(data$x[j]^2 + data$y[j]^2)
data$theta[j] <- atan2(data$y[j], data$x[j])
}
return(data)
}
data <- generate_spiral(n, r, r_offset, colors, seed = 2024)
# Plot the data in the x and y coordinates
plot(data$x, data$y, col = data$color, pch = 19, xlab = "x", ylab = "y")
# Load the required svm library
library(e1071)
library(caret)
# Convert class to a factor
data$class <- as.factor(data$class)
# Create a data frame with only the class and the x and y coordinates
data2 <- data.frame(class = data$class, x = data$x, y = data$y)
data2$class <- as.factor(data2$class)
# Use a radial basis function kernel to classify the data with the SVM function
svmfit <- svm(class ~ ., data = data2, kernel = "radial")
print(svmfit)
# Create a confusion matrix to evaluate the SVM model
confusionMatrix(predict(svmfit, data2), data2$class)
# Define colors for data points
point_colors <- c("blue", "red")
# Define colors for decision boundary
boundary_colors <- c("skyblue", "orange")
# Plot the data points
plot(data2$x, data2$y, col = point_colors[data2$class], pch = 19, xlab = "x", ylab = "y")
# Plot the decision boundary
x1_grid <- seq(min(data2$x), max(data2$x), length.out = 100)
x2_grid <- seq(min(data2$y), max(data2$y), length.out = 100)
grid <- expand.grid(x = x1_grid, y = x2_grid)
predicted_labels <- predict(svmfit, newdata = grid)
plot(grid$x, grid$y, col = boundary_colors[predicted_labels], pch = ".", cex = 3.5, xlab = "x", ylab = "y")
# Plot the data points
points(data2$x, data2$y, col = point_colors[data2$class], pch = 19)
legend("topright", legend = levels(data2$class), col = point_colors, pch = 19)
# First write a simple cross validation function
cross_validate <- function(folds, costs, gammas, data, seed) {
# Create a data frame to store the results
results <- data.frame(cost = numeric(0), gamma = numeric(0), accuracy = numeric(0))
# Loop through each cost and gamma value
for (cost in costs) {
for (gamma in gammas) {
# Set seed so the folds should be the same each time
set.seed(seed)
# Use cross-validation to find the best cost and gamma values
svm_cross <- svm(class ~ ., data = data, kernel = "radial", cross = folds, cost = cost, gamma = gamma)
# Store the results
results <- rbind(results, data.frame(cost = cost, gamma = gamma, accuracy = svm_cross$tot.accuracy))
}
}
return(results)
}
# Run our function
validation_data_frame <- cross_validate(5, c(0.1, 1, 10, 100, 1000), c(0.01, 0.1, 1, 10, 100), data2, seed = 2024)
# Print the top 5 best cost and gamma values
print(validation_data_frame[order(-validation_data_frame$accuracy), ][1:5, ])
# Use the best cost and gamma values to classify the data
svmfit_best <- svm(class ~ ., data = data2, kernel = "radial", cost = 1, gamma = 10)
# Create a confusion matrix to evaluate the SVM model
confusionMatrix(predict(svmfit_best, data2), data2$class)
predicted_labels_best <- predict(svmfit_best, newdata = grid)
plot(grid$x, grid$y, col = boundary_colors[predicted_labels_best], pch = ".", cex = 3.5, xlab = "x", ylab = "y")
# Plot the data points
points(data2$x, data2$y, col = point_colors[data2$class], pch = 19)
legend("topright", legend = levels(data2$class), col = point_colors, pch = 19)
cm = confusionMatrix(predict(svmfit_best, data2), data2$class)
cm[[2]]
cm[[1]]
cm[[3]]
cm[[4]]
cm[[2:3]]
cm[2:3]
cm[[2]]
cm[[2]]
cm[[3]]
cm[[3]][1:2]
function(cm.out) {
print(cm.out[[2]])
}
simpler_cm = function(cm.out) {
print(cm.out[[2]])
print(cm.out[[3]][1:2])
}
simpler_cm(cm)
